=head1 NAME

Perl6::Parameters – Perl 6-style prototypes with named parameters

=head1 SYNOPSIS

	use Perl6::Parameters;

	sub mysub($foo, ARRAY $bar, *%rest) {
		...
	}

=head1 DETAILS

Perl6::Parameters is a Perl module which simulates Perl 6's named parameters.  (When I talk about "named parameters" I mean 
something like the parameters you're used to from C, Java and many other languages--not pass-a-hash-with-the-parameters-in-it 
things.)

Like most other programming languages, Perl 6 will support subroutines with pre-declared variables the parameters are put into.  
(Using this will be optional, however.)  This goes far beyond the "line-noise prototypes" available in Perl 5, which only allow 
you to control context and automatically take references to some parameters—lines like C<my($first, $second)=(@_)> will no 
longer be necessary.

Although Perl 6 will have this, Perl 5 doesn't; this module makes it so that Perl 5 does.  It uses some other Perl 6-isms too, 
notably the names for builtin types and the unary-asterisk notation for flattening a list.

=head2 Crafting Parameter Lists

Crafting parameter lists is simple; just declare your subroutine and put the parameters, separated by commas or semicolons, in 
parenthesis.  (Using a semicolon signifies that all remaining parameters are optional; this may not be available this way in 
Perl 6, but I'm assuming it is until I hear otherwise.)

Most parameters are just variable names like C<$foo>; however, more sophisticated behavior is possible.  There are three ways to 
achieve this.

The first way is by specifying a type for the variable.  Certain types make the actual parameters turn into references to 
themselves:

=over 4

=item *
C<ARRAY $foo>

This turns an array into a reference to itself and stores the reference into C<$foo>.

=item *
C<HASH $foo>

This turns a hash into a reference to itself and stores the reference into C<$foo>.

=item *
C<CODE $foo>

This turns a subroutine into a reference to itself and stores the reference into C<$foo>.

=item *
C<SCALAR $foo>

This turns a scalar into a reference to itself and stores the reference into C<$foo>.

=item *
C<GLOB $foo>

This turns a typeglob into a reference to itself and stores the reference into C<$foo>.  Typeglobs will be going away in Perl 6; 
this type exists in this module so that it's useful for general use in Perl 5.

=item *
C<REGEXP $foo>

This turns a string or C<m//> into a C<qr//>'d version of itself (like the first parameter of C<split>) and stores it into 
C<$foo>.*

=item *
C<REF $foo>

This turns any parameter into a reference to itself and stores it into C<$foo>.*

=item *
C<AnythingElse $foo>

This has no effect in this module; it's treated as though you'd typed C<$foo> without the C<AnythingElse>.

=back

*These are being discussed in Perl5-Porters but haven't been implemented yet; using them currently causes a syntax error.

For example, if a subroutine had the parameters C<($foo, HASH $bar, CODE $baz)> and was called with C<($scalar, %hash, &mysub)> 
the subroutine would get the contents of C<$scalar>, a reference to C<%hash> and a reference to C<&mysub>.

The second way is by supplying an actual array or hash as a parameter name.  This requires an array or hash to be passed in for 
that parameter; it preserves the length of the array or hash.

The final way is only available for the last parameter: if an array or hash is prefixed with an asterisk, that array or hash 
will be filled with any additional parameters.

=head1 CAVEATS

=over 4

=item *

In Perl 6, parameters will be passed by constant reference; in this module parameters are passed by value.

=item *

In Perl 6, putting an C<is rw> at the end of a parameter will make it read-write; trying to use C<is rw> with this module will 
cause an error.

=item *

C<@_> and C<%_> may only be used for the last parameter, and then only when prefixed by an asterisk; any other use causes 
undefined behavior.

=item *

In Perl 6 a definition like C<HASH $foo> will take either a literal hash (with a C<%> sign in front of it) or a reference to a 
hash; this module requires a C<%> sign.  (Similar limitations apply for arrays.)

=back

=head1 BUGS

=over 4

=item *

Currently this module will modify string constants and POD documents if they appear to contain subroutine definitions.

=back

=head1 AUTHOR

Brent Dax <brentdax1@earthlink.net>

=head1 COPYRIGHT

Copyright (C) 2001 Brent Dax.

This module is free software and may be used, redistributed and modified under the same terms as Perl itself.